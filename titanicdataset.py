{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing all the required modules \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#upload the data\n",
    "train=pd.read_csv(\"train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330877</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17463</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>E46</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Gosta Leonard</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>237736</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Sandstrom, Miss. Marguerite Rut</td>\n",
       "      <td>female</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>PP 9549</td>\n",
       "      <td>16.7000</td>\n",
       "      <td>G6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Bonnell, Miss. Elizabeth</td>\n",
       "      <td>female</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113783</td>\n",
       "      <td>26.5500</td>\n",
       "      <td>C103</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Saundercock, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5. 2151</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Andersson, Mr. Anders Johan</td>\n",
       "      <td>male</td>\n",
       "      <td>39.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>347082</td>\n",
       "      <td>31.2750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Vestrom, Miss. Hulda Amanda Adolfina</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>350406</td>\n",
       "      <td>7.8542</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Hewlett, Mrs. (Mary D Kingcome)</td>\n",
       "      <td>female</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>248706</td>\n",
       "      <td>16.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Rice, Master. Eugene</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>382652</td>\n",
       "      <td>29.1250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Williams, Mr. Charles Eugene</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>244373</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Vander Planke, Mrs. Julius (Emelia Maria Vande...</td>\n",
       "      <td>female</td>\n",
       "      <td>31.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>345763</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Masselmani, Mrs. Fatima</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2649</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Fynney, Mr. Joseph J</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>239865</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Beesley, Mr. Lawrence</td>\n",
       "      <td>male</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>248698</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>D56</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>McGowan, Miss. Anna \"Annie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330923</td>\n",
       "      <td>8.0292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Sloper, Mr. William Thompson</td>\n",
       "      <td>male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113788</td>\n",
       "      <td>35.5000</td>\n",
       "      <td>A6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Miss. Torborg Danira</td>\n",
       "      <td>female</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Asplund, Mrs. Carl Oscar (Selma Augusta Emilia...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>347077</td>\n",
       "      <td>31.3875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Emir, Mr. Farred Chehab</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2631</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Fortune, Mr. Charles Alexander</td>\n",
       "      <td>male</td>\n",
       "      <td>19.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>19950</td>\n",
       "      <td>263.0000</td>\n",
       "      <td>C23 C25 C27</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>O'Dwyer, Miss. Ellen \"Nellie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330959</td>\n",
       "      <td>7.8792</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Todoroff, Mr. Lalio</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349216</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>861</th>\n",
       "      <td>862</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Giles, Mr. Frederick Edward</td>\n",
       "      <td>male</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28134</td>\n",
       "      <td>11.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>862</th>\n",
       "      <td>863</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Swift, Mrs. Frederick Joel (Margaret Welles Ba...</td>\n",
       "      <td>female</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17466</td>\n",
       "      <td>25.9292</td>\n",
       "      <td>D17</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863</th>\n",
       "      <td>864</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sage, Miss. Dorothy Edith \"Dolly\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>69.5500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>864</th>\n",
       "      <td>865</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Gill, Mr. John William</td>\n",
       "      <td>male</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>233866</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>865</th>\n",
       "      <td>866</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Bystrom, Mrs. (Karolina)</td>\n",
       "      <td>female</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>236852</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>866</th>\n",
       "      <td>867</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Duran y More, Miss. Asuncion</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>SC/PARIS 2149</td>\n",
       "      <td>13.8583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>867</th>\n",
       "      <td>868</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Roebling, Mr. Washington Augustus II</td>\n",
       "      <td>male</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17590</td>\n",
       "      <td>50.4958</td>\n",
       "      <td>A24</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868</th>\n",
       "      <td>869</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>van Melkebeke, Mr. Philemon</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>345777</td>\n",
       "      <td>9.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>870</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Master. Harold Theodor</td>\n",
       "      <td>male</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>870</th>\n",
       "      <td>871</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Balkic, Mr. Cerin</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349248</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>871</th>\n",
       "      <td>872</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Beckwith, Mrs. Richard Leonard (Sallie Monypeny)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>11751</td>\n",
       "      <td>52.5542</td>\n",
       "      <td>D35</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>872</th>\n",
       "      <td>873</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Carlsson, Mr. Frans Olof</td>\n",
       "      <td>male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>695</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>B51 B53 B55</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>873</th>\n",
       "      <td>874</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Vander Cruyssen, Mr. Victor</td>\n",
       "      <td>male</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>345765</td>\n",
       "      <td>9.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>874</th>\n",
       "      <td>875</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Abelson, Mrs. Samuel (Hannah Wizosky)</td>\n",
       "      <td>female</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>P/PP 3381</td>\n",
       "      <td>24.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>875</th>\n",
       "      <td>876</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Najib, Miss. Adele Kiamie \"Jane\"</td>\n",
       "      <td>female</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2667</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>876</th>\n",
       "      <td>877</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Gustafsson, Mr. Alfred Ossian</td>\n",
       "      <td>male</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7534</td>\n",
       "      <td>9.8458</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>877</th>\n",
       "      <td>878</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Petroff, Mr. Nedelio</td>\n",
       "      <td>male</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349212</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>879</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Laleff, Mr. Kristo</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349217</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>880</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)</td>\n",
       "      <td>female</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>11767</td>\n",
       "      <td>83.1583</td>\n",
       "      <td>C50</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>881</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Shelley, Mrs. William (Imanita Parrish Hall)</td>\n",
       "      <td>female</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>230433</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>881</th>\n",
       "      <td>882</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Markun, Mr. Johann</td>\n",
       "      <td>male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349257</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>883</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dahlberg, Miss. Gerda Ulrika</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7552</td>\n",
       "      <td>10.5167</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>883</th>\n",
       "      <td>884</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Banfield, Mr. Frederick James</td>\n",
       "      <td>male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>C.A./SOTON 34068</td>\n",
       "      <td>10.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>884</th>\n",
       "      <td>885</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sutehall, Mr. Henry Jr</td>\n",
       "      <td>male</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SOTON/OQ 392076</td>\n",
       "      <td>7.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>885</th>\n",
       "      <td>886</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Rice, Mrs. William (Margaret Norton)</td>\n",
       "      <td>female</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>382652</td>\n",
       "      <td>29.1250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "5              6         0       3   \n",
       "6              7         0       1   \n",
       "7              8         0       3   \n",
       "8              9         1       3   \n",
       "9             10         1       2   \n",
       "10            11         1       3   \n",
       "11            12         1       1   \n",
       "12            13         0       3   \n",
       "13            14         0       3   \n",
       "14            15         0       3   \n",
       "15            16         1       2   \n",
       "16            17         0       3   \n",
       "17            18         1       2   \n",
       "18            19         0       3   \n",
       "19            20         1       3   \n",
       "20            21         0       2   \n",
       "21            22         1       2   \n",
       "22            23         1       3   \n",
       "23            24         1       1   \n",
       "24            25         0       3   \n",
       "25            26         1       3   \n",
       "26            27         0       3   \n",
       "27            28         0       1   \n",
       "28            29         1       3   \n",
       "29            30         0       3   \n",
       "..           ...       ...     ...   \n",
       "861          862         0       2   \n",
       "862          863         1       1   \n",
       "863          864         0       3   \n",
       "864          865         0       2   \n",
       "865          866         1       2   \n",
       "866          867         1       2   \n",
       "867          868         0       1   \n",
       "868          869         0       3   \n",
       "869          870         1       3   \n",
       "870          871         0       3   \n",
       "871          872         1       1   \n",
       "872          873         0       1   \n",
       "873          874         0       3   \n",
       "874          875         1       2   \n",
       "875          876         1       3   \n",
       "876          877         0       3   \n",
       "877          878         0       3   \n",
       "878          879         0       3   \n",
       "879          880         1       1   \n",
       "880          881         1       2   \n",
       "881          882         0       3   \n",
       "882          883         0       3   \n",
       "883          884         0       2   \n",
       "884          885         0       3   \n",
       "885          886         0       3   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name     Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                             Allen, Mr. William Henry    male  35.0      0   \n",
       "5                                     Moran, Mr. James    male   NaN      0   \n",
       "6                              McCarthy, Mr. Timothy J    male  54.0      0   \n",
       "7                       Palsson, Master. Gosta Leonard    male   2.0      3   \n",
       "8    Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n",
       "9                  Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n",
       "10                     Sandstrom, Miss. Marguerite Rut  female   4.0      1   \n",
       "11                            Bonnell, Miss. Elizabeth  female  58.0      0   \n",
       "12                      Saundercock, Mr. William Henry    male  20.0      0   \n",
       "13                         Andersson, Mr. Anders Johan    male  39.0      1   \n",
       "14                Vestrom, Miss. Hulda Amanda Adolfina  female  14.0      0   \n",
       "15                    Hewlett, Mrs. (Mary D Kingcome)   female  55.0      0   \n",
       "16                                Rice, Master. Eugene    male   2.0      4   \n",
       "17                        Williams, Mr. Charles Eugene    male   NaN      0   \n",
       "18   Vander Planke, Mrs. Julius (Emelia Maria Vande...  female  31.0      1   \n",
       "19                             Masselmani, Mrs. Fatima  female   NaN      0   \n",
       "20                                Fynney, Mr. Joseph J    male  35.0      0   \n",
       "21                               Beesley, Mr. Lawrence    male  34.0      0   \n",
       "22                         McGowan, Miss. Anna \"Annie\"  female  15.0      0   \n",
       "23                        Sloper, Mr. William Thompson    male  28.0      0   \n",
       "24                       Palsson, Miss. Torborg Danira  female   8.0      3   \n",
       "25   Asplund, Mrs. Carl Oscar (Selma Augusta Emilia...  female  38.0      1   \n",
       "26                             Emir, Mr. Farred Chehab    male   NaN      0   \n",
       "27                      Fortune, Mr. Charles Alexander    male  19.0      3   \n",
       "28                       O'Dwyer, Miss. Ellen \"Nellie\"  female   NaN      0   \n",
       "29                                 Todoroff, Mr. Lalio    male   NaN      0   \n",
       "..                                                 ...     ...   ...    ...   \n",
       "861                        Giles, Mr. Frederick Edward    male  21.0      1   \n",
       "862  Swift, Mrs. Frederick Joel (Margaret Welles Ba...  female  48.0      0   \n",
       "863                  Sage, Miss. Dorothy Edith \"Dolly\"  female   NaN      8   \n",
       "864                             Gill, Mr. John William    male  24.0      0   \n",
       "865                           Bystrom, Mrs. (Karolina)  female  42.0      0   \n",
       "866                       Duran y More, Miss. Asuncion  female  27.0      1   \n",
       "867               Roebling, Mr. Washington Augustus II    male  31.0      0   \n",
       "868                        van Melkebeke, Mr. Philemon    male   NaN      0   \n",
       "869                    Johnson, Master. Harold Theodor    male   4.0      1   \n",
       "870                                  Balkic, Mr. Cerin    male  26.0      0   \n",
       "871   Beckwith, Mrs. Richard Leonard (Sallie Monypeny)  female  47.0      1   \n",
       "872                           Carlsson, Mr. Frans Olof    male  33.0      0   \n",
       "873                        Vander Cruyssen, Mr. Victor    male  47.0      0   \n",
       "874              Abelson, Mrs. Samuel (Hannah Wizosky)  female  28.0      1   \n",
       "875                   Najib, Miss. Adele Kiamie \"Jane\"  female  15.0      0   \n",
       "876                      Gustafsson, Mr. Alfred Ossian    male  20.0      0   \n",
       "877                               Petroff, Mr. Nedelio    male  19.0      0   \n",
       "878                                 Laleff, Mr. Kristo    male   NaN      0   \n",
       "879      Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)  female  56.0      0   \n",
       "880       Shelley, Mrs. William (Imanita Parrish Hall)  female  25.0      0   \n",
       "881                                 Markun, Mr. Johann    male  33.0      0   \n",
       "882                       Dahlberg, Miss. Gerda Ulrika  female  22.0      0   \n",
       "883                      Banfield, Mr. Frederick James    male  28.0      0   \n",
       "884                             Sutehall, Mr. Henry Jr    male  25.0      0   \n",
       "885               Rice, Mrs. William (Margaret Norton)  female  39.0      0   \n",
       "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
       "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket      Fare        Cabin Embarked  \n",
       "0        0         A/5 21171    7.2500          NaN        S  \n",
       "1        0          PC 17599   71.2833          C85        C  \n",
       "2        0  STON/O2. 3101282    7.9250          NaN        S  \n",
       "3        0            113803   53.1000         C123        S  \n",
       "4        0            373450    8.0500          NaN        S  \n",
       "5        0            330877    8.4583          NaN        Q  \n",
       "6        0             17463   51.8625          E46        S  \n",
       "7        1            349909   21.0750          NaN        S  \n",
       "8        2            347742   11.1333          NaN        S  \n",
       "9        0            237736   30.0708          NaN        C  \n",
       "10       1           PP 9549   16.7000           G6        S  \n",
       "11       0            113783   26.5500         C103        S  \n",
       "12       0         A/5. 2151    8.0500          NaN        S  \n",
       "13       5            347082   31.2750          NaN        S  \n",
       "14       0            350406    7.8542          NaN        S  \n",
       "15       0            248706   16.0000          NaN        S  \n",
       "16       1            382652   29.1250          NaN        Q  \n",
       "17       0            244373   13.0000          NaN        S  \n",
       "18       0            345763   18.0000          NaN        S  \n",
       "19       0              2649    7.2250          NaN        C  \n",
       "20       0            239865   26.0000          NaN        S  \n",
       "21       0            248698   13.0000          D56        S  \n",
       "22       0            330923    8.0292          NaN        Q  \n",
       "23       0            113788   35.5000           A6        S  \n",
       "24       1            349909   21.0750          NaN        S  \n",
       "25       5            347077   31.3875          NaN        S  \n",
       "26       0              2631    7.2250          NaN        C  \n",
       "27       2             19950  263.0000  C23 C25 C27        S  \n",
       "28       0            330959    7.8792          NaN        Q  \n",
       "29       0            349216    7.8958          NaN        S  \n",
       "..     ...               ...       ...          ...      ...  \n",
       "861      0             28134   11.5000          NaN        S  \n",
       "862      0             17466   25.9292          D17        S  \n",
       "863      2          CA. 2343   69.5500          NaN        S  \n",
       "864      0            233866   13.0000          NaN        S  \n",
       "865      0            236852   13.0000          NaN        S  \n",
       "866      0     SC/PARIS 2149   13.8583          NaN        C  \n",
       "867      0          PC 17590   50.4958          A24        S  \n",
       "868      0            345777    9.5000          NaN        S  \n",
       "869      1            347742   11.1333          NaN        S  \n",
       "870      0            349248    7.8958          NaN        S  \n",
       "871      1             11751   52.5542          D35        S  \n",
       "872      0               695    5.0000  B51 B53 B55        S  \n",
       "873      0            345765    9.0000          NaN        S  \n",
       "874      0         P/PP 3381   24.0000          NaN        C  \n",
       "875      0              2667    7.2250          NaN        C  \n",
       "876      0              7534    9.8458          NaN        S  \n",
       "877      0            349212    7.8958          NaN        S  \n",
       "878      0            349217    7.8958          NaN        S  \n",
       "879      1             11767   83.1583          C50        C  \n",
       "880      1            230433   26.0000          NaN        S  \n",
       "881      0            349257    7.8958          NaN        S  \n",
       "882      0              7552   10.5167          NaN        S  \n",
       "883      0  C.A./SOTON 34068   10.5000          NaN        S  \n",
       "884      0   SOTON/OQ 392076    7.0500          NaN        S  \n",
       "885      5            382652   29.1250          NaN        Q  \n",
       "886      0            211536   13.0000          NaN        S  \n",
       "887      0            112053   30.0000          B42        S  \n",
       "888      2        W./C. 6607   23.4500          NaN        S  \n",
       "889      0            111369   30.0000         C148        C  \n",
       "890      0            370376    7.7500          NaN        Q  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#view the data\n",
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>861</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>862</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>864</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>865</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>866</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>867</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>870</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>871</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>872</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>873</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>874</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>875</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>876</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>877</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>881</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>883</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>884</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>885</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass   Name    Sex    Age  SibSp  Parch  Ticket  \\\n",
       "0          False     False   False  False  False  False  False  False   False   \n",
       "1          False     False   False  False  False  False  False  False   False   \n",
       "2          False     False   False  False  False  False  False  False   False   \n",
       "3          False     False   False  False  False  False  False  False   False   \n",
       "4          False     False   False  False  False  False  False  False   False   \n",
       "5          False     False   False  False  False   True  False  False   False   \n",
       "6          False     False   False  False  False  False  False  False   False   \n",
       "7          False     False   False  False  False  False  False  False   False   \n",
       "8          False     False   False  False  False  False  False  False   False   \n",
       "9          False     False   False  False  False  False  False  False   False   \n",
       "10         False     False   False  False  False  False  False  False   False   \n",
       "11         False     False   False  False  False  False  False  False   False   \n",
       "12         False     False   False  False  False  False  False  False   False   \n",
       "13         False     False   False  False  False  False  False  False   False   \n",
       "14         False     False   False  False  False  False  False  False   False   \n",
       "15         False     False   False  False  False  False  False  False   False   \n",
       "16         False     False   False  False  False  False  False  False   False   \n",
       "17         False     False   False  False  False   True  False  False   False   \n",
       "18         False     False   False  False  False  False  False  False   False   \n",
       "19         False     False   False  False  False   True  False  False   False   \n",
       "20         False     False   False  False  False  False  False  False   False   \n",
       "21         False     False   False  False  False  False  False  False   False   \n",
       "22         False     False   False  False  False  False  False  False   False   \n",
       "23         False     False   False  False  False  False  False  False   False   \n",
       "24         False     False   False  False  False  False  False  False   False   \n",
       "25         False     False   False  False  False  False  False  False   False   \n",
       "26         False     False   False  False  False   True  False  False   False   \n",
       "27         False     False   False  False  False  False  False  False   False   \n",
       "28         False     False   False  False  False   True  False  False   False   \n",
       "29         False     False   False  False  False   True  False  False   False   \n",
       "..           ...       ...     ...    ...    ...    ...    ...    ...     ...   \n",
       "861        False     False   False  False  False  False  False  False   False   \n",
       "862        False     False   False  False  False  False  False  False   False   \n",
       "863        False     False   False  False  False   True  False  False   False   \n",
       "864        False     False   False  False  False  False  False  False   False   \n",
       "865        False     False   False  False  False  False  False  False   False   \n",
       "866        False     False   False  False  False  False  False  False   False   \n",
       "867        False     False   False  False  False  False  False  False   False   \n",
       "868        False     False   False  False  False   True  False  False   False   \n",
       "869        False     False   False  False  False  False  False  False   False   \n",
       "870        False     False   False  False  False  False  False  False   False   \n",
       "871        False     False   False  False  False  False  False  False   False   \n",
       "872        False     False   False  False  False  False  False  False   False   \n",
       "873        False     False   False  False  False  False  False  False   False   \n",
       "874        False     False   False  False  False  False  False  False   False   \n",
       "875        False     False   False  False  False  False  False  False   False   \n",
       "876        False     False   False  False  False  False  False  False   False   \n",
       "877        False     False   False  False  False  False  False  False   False   \n",
       "878        False     False   False  False  False   True  False  False   False   \n",
       "879        False     False   False  False  False  False  False  False   False   \n",
       "880        False     False   False  False  False  False  False  False   False   \n",
       "881        False     False   False  False  False  False  False  False   False   \n",
       "882        False     False   False  False  False  False  False  False   False   \n",
       "883        False     False   False  False  False  False  False  False   False   \n",
       "884        False     False   False  False  False  False  False  False   False   \n",
       "885        False     False   False  False  False  False  False  False   False   \n",
       "886        False     False   False  False  False  False  False  False   False   \n",
       "887        False     False   False  False  False  False  False  False   False   \n",
       "888        False     False   False  False  False   True  False  False   False   \n",
       "889        False     False   False  False  False  False  False  False   False   \n",
       "890        False     False   False  False  False  False  False  False   False   \n",
       "\n",
       "      Fare  Cabin  Embarked  \n",
       "0    False   True     False  \n",
       "1    False  False     False  \n",
       "2    False   True     False  \n",
       "3    False  False     False  \n",
       "4    False   True     False  \n",
       "5    False   True     False  \n",
       "6    False  False     False  \n",
       "7    False   True     False  \n",
       "8    False   True     False  \n",
       "9    False   True     False  \n",
       "10   False  False     False  \n",
       "11   False  False     False  \n",
       "12   False   True     False  \n",
       "13   False   True     False  \n",
       "14   False   True     False  \n",
       "15   False   True     False  \n",
       "16   False   True     False  \n",
       "17   False   True     False  \n",
       "18   False   True     False  \n",
       "19   False   True     False  \n",
       "20   False   True     False  \n",
       "21   False  False     False  \n",
       "22   False   True     False  \n",
       "23   False  False     False  \n",
       "24   False   True     False  \n",
       "25   False   True     False  \n",
       "26   False   True     False  \n",
       "27   False  False     False  \n",
       "28   False   True     False  \n",
       "29   False   True     False  \n",
       "..     ...    ...       ...  \n",
       "861  False   True     False  \n",
       "862  False  False     False  \n",
       "863  False   True     False  \n",
       "864  False   True     False  \n",
       "865  False   True     False  \n",
       "866  False   True     False  \n",
       "867  False  False     False  \n",
       "868  False   True     False  \n",
       "869  False   True     False  \n",
       "870  False   True     False  \n",
       "871  False  False     False  \n",
       "872  False  False     False  \n",
       "873  False   True     False  \n",
       "874  False   True     False  \n",
       "875  False   True     False  \n",
       "876  False   True     False  \n",
       "877  False   True     False  \n",
       "878  False   True     False  \n",
       "879  False  False     False  \n",
       "880  False   True     False  \n",
       "881  False   True     False  \n",
       "882  False   True     False  \n",
       "883  False   True     False  \n",
       "884  False   True     False  \n",
       "885  False   True     False  \n",
       "886  False   True     False  \n",
       "887  False  False     False  \n",
       "888  False   True     False  \n",
       "889  False  False     False  \n",
       "890  False   True     False  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check for null \n",
    "train.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xc455550>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot a heatmap\n",
    "sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xc545eb8>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYgAAAEKCAYAAAAIO8L1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAD6lJREFUeJzt3XuwXWV9xvHvAxGtolxMoJiEhqkZK50qypFS6UytOB2w1TBWEG9EzEz8gzo6trW0nam0tlOdWhFvTDNFTZxWQCwldRiVAam29UKiyLWWlCKcBkmQi6L1EvrrH/s95Rhekh3IOvuQ8/3M7Nlrvetda/82kzkP77q8O1WFJEk722/SBUiS5icDQpLUZUBIkroMCElSlwEhSeoyICRJXQaEJKnLgJAkdRkQkqSuRZMu4LFYvHhxrVixYtJlSNLjyubNm++uqiW76/e4DogVK1awadOmSZchSY8rSb41Tj9PMUmSugwISVKXASFJ6jIgJEldBoQkqcuAkCR1GRCSpC4DQpLUZUBIkroe109S7w3H/v6GSZegeWjzX50x6RKkiXMEIUnqMiAkSV0GhCSpy4CQJHUZEJKkLgNCktRlQEiSugwISVKXASFJ6jIgJEldBoQkqcuAkCR1GRCSpC4DQpLUNWhAJLktyfVJrk2yqbUdmuSKJLe090Nae5K8P8mWJNclef6QtUmSdm0uRhC/XlXHVNVUWz8buLKqVgJXtnWAk4GV7bUWOH8OapMkPYJJnGJaBaxvy+uBU2a1b6iRLwMHJzliAvVJkhg+IAr4XJLNSda2tsOr6k6A9n5Ya18K3DFr3+nW9lOSrE2yKcmm7du3D1i6JC1sQ//k6AlVtTXJYcAVSf59F33TaauHNVStA9YBTE1NPWy7JGnvGHQEUVVb2/s24FLgOOCumVNH7X1b6z4NLJ+1+zJg65D1SZIe2WABkeQpSZ46swz8BnADsBFY3bqtBi5ryxuBM9rdTMcD98+cipIkzb0hTzEdDlyaZOZz/r6qPpPkGuDiJGuA24FTW//LgZcCW4AfAGcOWJskaTcGC4iquhV4bqf9O8CJnfYCzhqqHknSnvFJaklSlwEhSeoyICRJXQaEJKnLgJAkdRkQkqQuA0KS1GVASJK6DAhJUpcBIUnqMiAkSV0GhCSpy4CQJHUZEJKkLgNCktRlQEiSugwISVKXASFJ6jIgJEldBoQkqcuAkCR1GRCSpC4DQpLUZUBIkroMCElSlwEhSeoyICRJXQaEJKlr8IBIsn+Sryf5dFs/KslXktyS5KIkB7T2J7b1LW37iqFrkyQ9srkYQbwFuHnW+ruBc6tqJXAvsKa1rwHurapnAue2fpKkCRk0IJIsA34T+Nu2HuDFwCWty3rglLa8qq3Ttp/Y+kuSJmDoEcT7gLcD/9vWnw7cV1U72vo0sLQtLwXuAGjb72/9JUkTMFhAJPktYFtVbZ7d3OlaY2ybfdy1STYl2bR9+/a9UKkkqWfIEcQJwMuT3AZcyOjU0vuAg5Msan2WAVvb8jSwHKBtPwi4Z+eDVtW6qpqqqqklS5YMWL4kLWyDBURV/WFVLauqFcDpwFVV9Vrg88ArW7fVwGVteWNbp22/qqoeNoKQJM2NSTwH8QfA25JsYXSN4YLWfgHw9Nb+NuDsCdQmSWoW7b7LY1dVVwNXt+VbgeM6fX4InDoX9UiSds8nqSVJXQaEJKnLgJAkdRkQkqQuA0KS1GVASJK6DAhJUpcBIUnqMiAkSV0GhCSpy4CQJHUZEJKkLgNCktRlQEiSugwISVKXASFJ6jIgJEldc/KLcpL23O1/9kuTLkHz0JF/cv2cfZYjCElSlwEhSeoyICRJXQaEJKnLgJAkdRkQkqQuA0KS1DVWQCS5cpw2SdK+Y5cPyiV5EvBkYHGSQ4C0TU8DnjFwbZKkCdrdk9RvAt7KKAw281BAfBf40IB1SZImbJcBUVXnAecleXNVfWCOapIkzQNjzcVUVR9I8kJgxex9qmrDI+3TTk99AXhi2+eSqnpHkqOAC4FDga8Br6+qHyd5IrABOBb4DvCqqrrt0XwpSdJjN+5F6o8D7wF+FXhBe03tZrcfAS+uqucCxwAnJTkeeDdwblWtBO4F1rT+a4B7q+qZwLmtnyRpQsadzXUKOLqqatwDt74PtNUntFcBLwZe09rXA+cA5wOr2jLAJcAHk2RPPlOStPeM+xzEDcDP7unBk+yf5FpgG3AF8J/AfVW1o3WZBpa25aXAHQBt+/3A0/f0MyVJe8e4I4jFwE1Jvsro1BEAVfXyXe1UVQ8CxyQ5GLgUeHavW3vPLrb9vyRrgbUARx555FjFS5L23LgBcc5j+ZCqui/J1cDxwMFJFrVRwjJga+s2DSwHppMsAg4C7ukcax2wDmBqasrTT5I0kHHvYvrnPT1wkiXAT1o4/AzwEkYXnj8PvJLRnUyrgcvaLhvb+pfa9qu8/iBJkzNWQCT5Hg+d7jmA0QXn71fV03ax2xHA+iT7M7rWcXFVfTrJTcCFSf4c+DpwQet/AfDxJFsYjRxO3+NvI0naa8YdQTx19nqSU4DjdrPPdcDzOu239vatqh8Cp45TjyRpeI9qNteq+kdGt6tKkvZR455iesWs1f0YPRfh9QFJ2oeNexfTy2Yt7wBuY/RgmyRpHzXuNYgzhy5EkjS/jDsX07IklybZluSuJJ9Ksmzo4iRJkzPuReqPMnpO4RmMpsT4p9YmSdpHjRsQS6rqo1W1o70+BiwZsC5J0oSNGxB3J3ldm3xv/ySvY/SbDZKkfdS4AfFG4DTg28CdjKbC8MK1JO3Dxr3N9Z3A6qq6FyDJoYx+QOiNQxUmSZqscUcQz5kJB4CquofONBqSpH3HuAGxX5JDZlbaCGLc0Yck6XFo3D/yfw38W5JLGE2xcRrwF4NVJUmauHGfpN6QZBOjCfoCvKKqbhq0MknSRI19mqgFgqEgSQvEo5ruW5K07zMgJEldBoQkqcuAkCR1GRCSpC4DQpLUZUBIkroMCElSlwEhSeoyICRJXQaEJKnLgJAkdRkQkqQuA0KS1DVYQCRZnuTzSW5OcmOSt7T2Q5NckeSW9n5Ia0+S9yfZkuS6JM8fqjZJ0u4NOYLYAfxuVT0bOB44K8nRwNnAlVW1EriyrQOcDKxsr7XA+QPWJknajcECoqrurKqvteXvATcDS4FVwPrWbT1wSlteBWyokS8DByc5Yqj6JEm7NifXIJKsAJ4HfAU4vKruhFGIAIe1bkuBO2btNt3adj7W2iSbkmzavn37kGVL0oI2eEAkORD4FPDWqvrurrp22uphDVXrqmqqqqaWLFmyt8qUJO1k0IBI8gRG4fB3VfUPrfmumVNH7X1ba58Gls/afRmwdcj6JEmPbMi7mAJcANxcVe+dtWkjsLotrwYum9V+Rrub6Xjg/plTUZKkubdowGOfALweuD7Jta3tj4B3ARcnWQPcDpzatl0OvBTYAvwAOHPA2iRJuzFYQFTVv9C/rgBwYqd/AWcNVY8kac/4JLUkqcuAkCR1GRCSpC4DQpLUZUBIkroMCElSlwEhSeoyICRJXQaEJKnLgJAkdRkQkqQuA0KS1GVASJK6DAhJUpcBIUnqMiAkSV0GhCSpy4CQJHUZEJKkLgNCktRlQEiSugwISVKXASFJ6jIgJEldBoQkqcuAkCR1GRCSpC4DQpLUNVhAJPlIkm1JbpjVdmiSK5Lc0t4Pae1J8v4kW5Jcl+T5Q9UlSRrPkCOIjwEn7dR2NnBlVa0ErmzrACcDK9trLXD+gHVJksYwWEBU1ReAe3ZqXgWsb8vrgVNmtW+okS8DByc5YqjaJEm7N9fXIA6vqjsB2vthrX0pcMesftOtTZI0IfPlInU6bdXtmKxNsinJpu3btw9cliQtXHMdEHfNnDpq79ta+zSwfFa/ZcDW3gGqal1VTVXV1JIlSwYtVpIWsrkOiI3A6ra8GrhsVvsZ7W6m44H7Z05FSZImY9FQB07yCeBFwOIk08A7gHcBFydZA9wOnNq6Xw68FNgC/AA4c6i6JEnjGSwgqurVj7DpxE7fAs4aqhZJ0p6bLxepJUnzjAEhSeoyICRJXQaEJKnLgJAkdRkQkqQuA0KS1GVASJK6DAhJUpcBIUnqMiAkSV0GhCSpy4CQJHUZEJKkLgNCktRlQEiSugwISVKXASFJ6jIgJEldBoQkqcuAkCR1GRCSpC4DQpLUZUBIkroMCElSlwEhSeoyICRJXQaEJKnLgJAkdc2rgEhyUpJvJtmS5OxJ1yNJC9m8CYgk+wMfAk4GjgZeneToyVYlSQvXvAkI4DhgS1XdWlU/Bi4EVk24JklasOZTQCwF7pi1Pt3aJEkTsGjSBcySTls9rFOyFljbVh9I8s1Bq1pYFgN3T7qI+SDvWT3pEvTT/Lc54x29P5V77OfG6TSfAmIaWD5rfRmwdedOVbUOWDdXRS0kSTZV1dSk65B25r/NyZhPp5iuAVYmOSrJAcDpwMYJ1yRJC9a8GUFU1Y4kvwN8Ftgf+EhV3TjhsiRpwZo3AQFQVZcDl0+6jgXMU3ear/y3OQGpeth1YEmS5tU1CEnSPGJAyClONG8l+UiSbUlumHQtC5EBscA5xYnmuY8BJ026iIXKgJBTnGjeqqovAPdMuo6FyoCQU5xI6jIgNNYUJ5IWHgNCY01xImnhMSDkFCeSugyIBa6qdgAzU5zcDFzsFCeaL5J8AvgS8Kwk00nWTLqmhcQnqSVJXY4gJEldBoQkqcuAkCR1GRCSpC4DQpLUZUBIQJI/TnJjkuuSXJvkl/fCMV++t2bHTfLA3jiOtCe8zVULXpJfAd4LvKiqfpRkMXBAVe32ifIki9qzJEPX+EBVHTj050izOYKQ4Ajg7qr6EUBV3V1VW5Pc1sKCJFNJrm7L5yRZl+RzwIYkX0nyizMHS3J1kmOTvCHJB5Mc1I61X9v+5CR3JHlCkp9P8pkkm5N8MckvtD5HJflSkmuSvHOO/3tIgAEhAXwOWJ7kP5J8OMmvjbHPscCqqnoNoynSTwNIcgTwjKraPNOxqu4HvgHMHPdlwGer6ieMfmv5zVV1LPB7wIdbn/OA86vqBcC3H/M3lB4FA0ILXlU9wOgP/lpgO3BRkjfsZreNVfU/bfli4NS2fBrwyU7/i4BXteXT22ccCLwQ+GSSa4G/YTSaATgB+ERb/vgefSFpL1k06QKk+aCqHgSuBq5Ocj2wGtjBQ/8T9aSddvn+rH3/O8l3kjyHUQi8qfMRG4G/THIoozC6CngKcF9VHfNIZT3KryPtFY4gtOAleVaSlbOajgG+BdzG6I85wG/v5jAXAm8HDqqq63fe2EYpX2V06ujTVfVgVX0X+K8kp7Y6kuS5bZd/ZTTSAHjtnn8r6bEzICQ4EFif5KYk1zH6be5zgD8FzkvyReDB3RzjEkZ/0C/eRZ+LgNe19xmvBdYk+QZwIw/93OtbgLOSXAMctGdfR9o7vM1VktTlCEKS1GVASJK6DAhJUpcBIUnqMiAkSV0GhCSpy4CQJHUZEJKkrv8DbV+8iNyp7CkAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot graph to check the survival rate\n",
    "sns.countplot(x='Survived',data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xc9ecf98>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot graph to find out how many male and female survived\n",
    "sns.countplot(x='Survived',hue='Sex',data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xca47f28>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot graph to check out how many people survived in each class\n",
    "sns.countplot(x='Survived',hue='Pclass',data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xcb20588>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting a histrogram for Fare\n",
    "train['Fare'].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xcd992e8>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot a graph between Age and Pclass to find age limit of each people in each class\n",
    "sns.boxplot(x='Pclass',y='Age',data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To assign values to all the NIL values in age from the above graph\n",
    "\n",
    "def impute_age(cols):\n",
    "    Age = cols[0]\n",
    "    Pclass=cols[1]\n",
    "    \n",
    "    if pd.isnull(Age):\n",
    "        \n",
    "        if Pclass==1:\n",
    "            return 37\n",
    "        elif Pclass==2:\n",
    "            return 29\n",
    "        else:\n",
    "            return 24\n",
    "        \n",
    "    else:\n",
    "            return Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Applying changes to the age \n",
    "train['Age']=train[['Age','Pclass']].apply(impute_age,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x9c808d0>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWQAAAEeCAYAAAC9om+HAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAEGVJREFUeJzt3XnwrmVdx/H395zDrpAQClkKsu+LUGDGJuXSQCEYCA4M4TCVsUjFOFlgGFoOZMAkghIDZQInNMkZFQNiMQjZd0YDVCB3dmI7fPvjuh/Oc378zkJ27uvL8H7NnOH3PL/D3J855zmf331f93Vdd2QmkqT+5vQOIElqLGRJKsJClqQiLGRJKsJClqQiLGRJKsJClqQiLGRJKsJClqQi5r2U3/zrc97jsj5Jeom+/vz8WJbf5xmyJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBVhIUtSERayJBURmTn+QSMOz8wzRz/wUlTMZaZlY6ZlVzGXmZpeZ8iHdzru0lTMZaZlY6ZlVzGXmXDIQpLKsJAlqYhehVxqrGhKxVxmWjZmWnYVc5mJTjf1JEkv5pCFJBVhIUtSERaypNFFxKoRsfXwa6UCeXaMiHWmXh8cEV+KiFMjYs2xcryiCzkiNph8GCJit4g4MiJ+rneuqiJinYjYOyL2mv7w9hQRr4+It0TELpNfnfNERLwvIo4bXr8hIn65Z6YhxyoRsUmBHCtExN8C9wNnA+cA90TEh4bvb9cp2hnAM0OGXYC/As4FHmHEm3vL/aZeRDwGLPYgmbn6cg2wBBFxE7ADsB7wNeAiYJPMfFfHTK8DPgb8Qma+MyI2B3bOzLN6ZRpyvR84DrgUCGBX4ITM/PuOmf4a2B+4A1gwvJ2ZuXfHTKcDzwN7ZOZmEfEa4OLM3LFjpr2Ak4AVM3P9iNiW9nc3+p9TRJwKrAp8MDMfG95bfci3AHhHZq7fIdfNmbnN8PXfAT/KzI8Mr2/KzG1HCZKZo/wCTgD+AHg1sDrw+8CxYx1/MZluGP77J8ARw9c3ds70FeB3gJuH1/OAW3tmGnLcDaw19Xot4O4CmVbq/WczI9PkM3Xj1Hs3d850PbDGjEy3dMrybYYTwRnvzwUeAnbqlOs2YN7w9V3ALtPfGyvHmEMWb8/MT2XmY5n5aGaeDuw74vFn82xEvBc4BPjy8N4KHfMA/HxmXkA7yyIzn2Ph2V9P9wOPTb1+DPhepywT99D/72umZyNiLsNVYUSszfB32dFzmflI5wwTz+fQctMycwHtrPSaDpkAPg9cHhFfAv4HuBIgIjakDVuMYt5YBwIWRMRBwHm0D+t76V80hwK/B5yYmfdGxPrAP3bO9ERErMXCf9A7MeIHYgkeAP5z+MAm8FvAtRFxDEBm/s1YQSLitCHDk8BNEXEJ8PTk+5l55FhZZnEq8EXgtRFxIrAf8Gcd8wDcFhEHAnMjYiPgSOA/OmW5IyIOzsxzp9+MiPcBd3bKRGaeOHyO1qUNMU1+aMwBjhgrx2gLQyJiPeAU4Fdp/5i+ARydmfeNEmAphrG+X8rMWzrn2B44DdiSdhm1NrBfgVzHL+n7mfkXI2Y5ZClZzhkry2wiYlPgbbSx9ksys1vRDHlWBT4M/MaQ6WvARzPzqQ5ZXg98gXYWej2tC3YEVgH2ycwHxs5UySt6pV5E/DuwN+1K4SbgR8DlmXlM51zzgE1o/3juzsxne+aZafjh9fBsl54j51gNeGq43GUYKlgpM5/slGcObWx2yx7HfzmJiD2ALWif8dsz85LOkUoYbcgiIjYGTgdel5lbRsTWwN6Z+ZdjZZjFGpn56DCD4OzMPD4iep+JvnvGWxtHxCO0G3s/7JDnOOCCzLxrmCL4FWBb4LmIODAz/23sTFMuAfYEHh9erwJcDLylR5jMfD4ibo6IN2Tmd3tkmBYR/8qSZzh1m42SmZfSZuxoyphjyJ+hzWY4AyAzb4mIfwJ6FvK8iFiXNqvhwx1zTDsM2Bm4bHi9G3ANrZhPyMx/GDnP/sBHh68PoY2prQ1sTJtD2rOQV87MSRmTmY8Pl+c9rQvcHhHXAk9M3uxUfid1OKZ+BmMW8qqZeW1ETL/33IjHn80JtPG0qzLzmxHxJuBbnTM9D2yWmT+AF+Ylnw78CnAFMHYhPzM1NPF24PPDEMGdw9BKT09ExPaZeQNARLyZNjbZ02hj6UuTmZf3zqCXZsx/UD+OiA1YOHtgP+C/Rzz+i2TmfGD+1Ot76D8Vb71JGQ9+CGycmT+NiB5jyU9HxJbAD4DdgT+e+l7vs9GjgPkR8eDwel3aGX03FUtwmFnxcWBzYOXJ+5n5pm6hNKsxC/kDtCWIm0bEA8C9wEEjHv9FImJl2hDBFiz6Qf3dbqHgyoj4Mgt/UOwLXDHcwHq4Q56jgH+mDVN8MjPvBYiIdwE3dsjDcPw5wIrApiy8AXpX7xugwzTF04DNaPnmAk9kxxWptCXKxwOfpP1QPZT256Vixpz2NjczFwzFMieHZZM9RcR82qqcA2nDFwcBd2bmUR0zBfBu4K3DWz8B1s3MD/TKVFVEXJ2ZO/fOMS0irgMOoP1A3QE4GNgoM/+0Y6brM/PNEXFrZm41vHdlZv5ar0ya3Zgr9e6NiDOBnVh4V7y3DTPzz2lnMOcAvwls1TPQMF77X8CzwD60+axd57ECRMRa0Xa+uiEiro+IU4YFLD1dHBH7xowbE71l5reBuZm5IDPPpt2Y7emp4YriWxHxhxGxD/Dazpk0izGHLDYB9qINXZw1XJafl5lXjZhhpsnl7cPDOOn3aRsNjW6YFngAbQXjT4DzaVcwu/fIM4vzaDcVJ2PsB9Ey7tktERwDrEabgvcU7TI8Ow8PPBkRK9JWEH6Cdp9ktY55AI6mjfcfSZsxszvtzF3FdFkYMiwsOAU4KDPnjh5gYY73AxcCW9PG2V4FHJeZn+6Q5Xna+vnDhjMsIuKeKjdeJpe9M967LjN36JWpooh4I+0G6IrAB2mb+nxq8nfaKdMOtGmdb2Th3h+ZmVv3yqTZjVrIEbEr7S74O4FvAudn5oWjBShsuIw8gLao4au0M9LPZoetCGcTEScB1wEXDG/tB2yRmUtcUr28DT/cN2LRm7JXdMhRYjHIbCLibtoagFuZ2ugoM7/TLZRmNeZNvXtpy5MvAC7KzCeW8r8szyxLXBo95kY5Mw03PX+bNnSxB23xxRcz8+JOeSb7WQft0nuyIdRc4PGewwPDFc5RwC/SPls7AVdn5h4dstyQmdsPX1+Ymb2nT74gIq7KzLcu/XeqtzHHkLfJzEdHPN6SvLp3gMUZflB9DvhctEfHvAf4EG1JcI88Zf+saGW8I3BNZu4+bOrTa2HG9I3FEsNMU46PiM/SlppP74r3hX6RNJvlXsgRcWxmfgI4MSJm2wd19K0Sx9yZ7GeRmT+lLTU/o1eGiNh02Mdi+9m+P1kl18lTmflURBARKw05ez2mKBfzdQWH0uZrr8DCIYuk7bqmQsY4Q55M2bpuhGO9JBFxDnBUZj48vH4NcHLnhSHVHAMcDpw89d504Yw+PDDl/mjPQPwX4OsR8RDw4FL+n+Vlm4h4lHamvMrwNdSY+bHNZP6xahtzDHm7zOy2sms2EXFjZm63tPdeyaI9oPO7mfn94fUhtKlv9wEfGc7iuxtuGK8BfDUzn+mdp5KI+AxtleUdvbNoycYs5Mtoew3Mp80/vn2UAy9BRNwM7JaZDw2v16Tth+zZxCAibgD2HPbS2IU2++MI2hacm2Xmfh0yrUx70suGtJkDZ2V71JVmERF3AhvQtit4moVn7U57K2a0m3rDTZd1aFtdnhntSbPnd94P+WTg6mEJdQ7ZTuyYp6K5U2fB+wNnDlMVL4z21O4ezqEt6rmSNoVyc9oNPs3uHb0DaNn0WhiyFXAssH9mrjh6gEWzbE4bB508bsfLuikRcRuwbWY+FxF3AYdP5vlGxG09no4xY0+GecC1kyln0svZmE8M2Yx2hrUfbWnwecAfjXX8GVlmXvJ+2kvexZo8jffHdHwa7wwv7Og2/KDoFEP6/zXmGPI1tH/c8zOz153wSZbzWfSS977MPLpnpsqGLSUnT+N9YnhvY+BVPaa9RcQCFj6NI2iPbnqSGjMapP+zUQo52sMnz83MrvsfT3jJK6miUbbfHB75s9awC1YFi1zy9gwiSRNjLp3+DvCNiLiIRR/+2GPfiMkkflh0Ir+XvJK6GbOQHxx+zaHzXhI9t/yUpMXpMu1NkvRiY057u4xZNl3psVWiJFU05pDF9OPjV6bth+ANNUkadB2yiIjLM3PXbgEkqZAxhyzWnHo5h/aI9HXGOr4kVTfmkMX1LBxDfo62feNhIx5fkkob44khOwLfmzysc8Z+um7kI0mDMVbqnQE8AzDsp/tx2vaJjwBnjnB8SXpZGGPIouJ+upJUzhhnyHOHDXwA3gZcOvW9McewJam0MQqx4n66klTOWNtvltpPV5Iqci8LSSpilP2QJUlLZyFLUhEWsiQVYSFLUhEWsiQV8b84F1K7bRcIjgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting a heatmap again to check out the empty values -No empty values\n",
    "sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To create dummy values for age and Embarked\n",
    "embark=pd.get_dummies(train['Embarked'],drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "train=pd.concat([train,sex,embark],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dropping Survived and Sex columns\n",
    "x=train.drop('Survived',axis=1)\n",
    "y=train.drop('Sex',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implementing train test split\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Taking X train X test Y train and Y test for splitting and test size =30%  \n",
    "X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=101)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Using Logisitic Regression algorithm to create our model\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 427,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a Logmodel\n",
    "logmodel=LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Intern_4.PI-DESK-09\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='warn',\n",
       "          n_jobs=None, penalty='l2', random_state=None, solver='warn',\n",
       "          tol=0.0001, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Creating a fit for X_train and y_train\n",
    "logmodel.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To find out the predictions for X_test\n",
    "predictions=logmodel.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To find the classification Report\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.86      0.81       154\n",
      "           1       0.78      0.65      0.71       114\n",
      "\n",
      "   micro avg       0.77      0.77      0.77       268\n",
      "   macro avg       0.77      0.76      0.76       268\n",
      "weighted avg       0.77      0.77      0.77       268\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#To check out the precision score , f1-score\n",
    "print(classification_report(y_test,predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To find out the confusion Matrix\n",
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[133,  21],\n",
       "       [ 40,  74]], dtype=int64)"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Confusion Matrix between y_test and predictions\n",
    "confusion_matrix(y_test,predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To find out the accuracy score for the model\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7723880597014925"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test,predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8238\n"
     ]
    }
   ],
   "source": [
    "#Using Random Forest Classifier and to find the accuracy\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "rf = RandomForestClassifier(criterion='gini', \n",
    "                             n_estimators=700,\n",
    "                             min_samples_split=10,\n",
    "                             min_samples_leaf=1,\n",
    "                             max_features='auto',\n",
    "                             oob_score=True,\n",
    "                             random_state=1,\n",
    "                             n_jobs=-1)\n",
    "rf.fit(train.iloc[:, 1:], train.iloc[:, 0])\n",
    "print(\"%.4f\" % rf.oob_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dropping Fare column\n",
    "train.drop('Fare', axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>male</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass   Age  SibSp  Parch  male  Q  S\n",
       "0         0       3  22.0      1      0     1  0  1\n",
       "1         1       1  38.0      1      0     0  0  0\n",
       "2         1       3  26.0      0      0     0  0  1\n",
       "3         1       1  35.0      1      0     0  0  1\n",
       "4         0       3  35.0      0      0     1  0  1"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Using K-fold cross validation to find the array and find the mean of the array\n",
    "\n",
    "from sklearn.model_selection import KFold,cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "k_fold = KFold(n_splits=10,shuffle=True, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "scoring = 'accuracy'\n",
    "results = cross_val_score(rf,X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.79365079, 0.82539683, 0.80952381, 0.82258065, 0.79032258,\n",
       "       0.80645161, 0.79032258, 0.80645161, 0.82258065, 0.87096774])"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8138248847926267"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>male</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass   Age  SibSp  Parch  male  Q  S\n",
       "0         0       3  22.0      1      0     1  0  1\n",
       "1         1       1  38.0      1      0     0  0  0\n",
       "2         1       3  26.0      0      0     0  0  1\n",
       "3         1       1  35.0      1      0     0  0  1\n",
       "4         0       3  35.0      0      0     1  0  1"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Intern_4.PI-DESK-09\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:190: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self._setitem_with_indexer(indexer, value)\n"
     ]
    }
   ],
   "source": [
    "#Combining both the Sibsp column and Parch into one separate Family Column\n",
    "#Feature Engineering\n",
    "\n",
    "train['Family'] = train[\"Parch\"] + train[\"SibSp\"]\n",
    "train['Family'].loc[train['Family'] > 0] = 1\n",
    "train['Family'].loc[train['Family'] == 0] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xd9a5cf8>"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting  countplot to check survival of people with family and people without family \n",
    "sns.countplot(x='Family', data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1086e4a8>"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting bargraph between Family and Survived\n",
    "sns.barplot(x='Family', y='Survived', data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "family_pers = train[[\"Family\", \"Survived\"]].groupby(['Family'],as_index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop(['SibSp','Parch'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 8 columns):\n",
      "Survived    891 non-null int64\n",
      "Pclass      891 non-null int64\n",
      "Age         891 non-null float64\n",
      "male        891 non-null uint8\n",
      "Q           891 non-null uint8\n",
      "S           891 non-null uint8\n",
      "Family      891 non-null int64\n",
      "Person      891 non-null object\n",
      "dtypes: float64(1), int64(3), object(1), uint8(3)\n",
      "memory usage: 37.5+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x25d667f0>"
      ]
     },
     "execution_count": 351,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 915.875x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#To check the survival of each age group\n",
    "facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\n",
    "facet.map(sns.kdeplot,'Age',shade= True)\n",
    "facet.set(xlim=(0, train['Age'].max()))\n",
    "facet.add_legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define a Person column to check whether the survived people are children or adults and add it to the Training Data\n",
    "#Feature Engineering \n",
    "def get_person(passenger):\n",
    "    age,male = passenger\n",
    "    return 'child' if age < 16 else 'adult'\n",
    "    \n",
    "train['Person'] = train[['Age','male']].apply(get_person,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x25c9b080>"
      ]
     },
     "execution_count": 350,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot a graph between Survived and Person\n",
    "sns.barplot(x='Person', y='Survived', data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Intern_4.PI-DESK-09\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.8154093097913323"
      ]
     },
     "execution_count": 368,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Accuracy after Feature Engineering using Logisitic Regression\n",
    "\n",
    "#There is an increase in accuracy from 77% to 81%\n",
    "\n",
    "logreg = LogisticRegression()\n",
    "\n",
    "logreg.fit(X_train, y_train)\n",
    "\n",
    "Y_pred = logreg.predict(X_test)\n",
    "\n",
    "logreg.score(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 369,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9839486356340289"
      ]
     },
     "execution_count": 369,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Accuracy after Feature Engineering using Random Forest\n",
    "\n",
    "#There is an increase in accuracy from 82% to 98%\n",
    "\n",
    "random_forest = RandomForestClassifier(n_estimators=101)\n",
    "\n",
    "random_forest.fit(X_train, y_train)\n",
    "\n",
    "Y_pred = random_forest.predict(X_test)\n",
    "\n",
    "random_forest.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Assumptions of Logistic Regression using Ridge and Residual Plots\n",
    "\n",
    "'''\n",
    "To check whether the given model is fit for this algorithm\n",
    "Since there is a linear curve between Residuals and Predicted Values the given model works better on a Logisitc Regression\n",
    "And if the data was randomly scattered in an orderly fashion then the given data works better on Linear Regression\n",
    " To prove Homoscadisticity-By plotting Residual Plots\n",
    "\n",
    "'''\n",
    "from sklearn.linear_model import Ridge\n",
    "from yellowbrick.regressor import ResidualsPlot\n",
    "\n",
    "# Instantiate the linear model and visualizer\n",
    "ridge = Ridge()\n",
    "visualizer = ResidualsPlot(ridge)\n",
    "\n",
    "visualizer.fit(X_train, y_train)  \n",
    "visualizer.score(X_test, y_test)  \n",
    "visualizer.poof()                 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implementing K fold cross validation after Feature Engineering \n",
    "\n",
    "from sklearn.model_selection import KFold,cross_val_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 420,
   "metadata": {},
   "outputs": [],
   "source": [
    "k_fold = KFold(n_splits=10,shuffle=True, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 421,
   "metadata": {},
   "outputs": [],
   "source": [
    "scoring = 'accuracy'\n",
    "results = cross_val_score(rf,X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.79365079, 0.77777778, 0.77777778, 0.82258065, 0.77419355,\n",
       "       0.82258065, 0.70967742, 0.75806452, 0.82258065, 0.83870968])"
      ]
     },
     "execution_count": 422,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7897593445980543"
      ]
     },
     "execution_count": 423,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(results)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
